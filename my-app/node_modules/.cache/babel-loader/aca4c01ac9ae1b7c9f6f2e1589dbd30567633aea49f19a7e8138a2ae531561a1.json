{"ast":null,"code":"var _jsxFileName = \"E:\\\\DU-AN-TOT-NGHIEP\\\\Website_K18_ThuongMaiDienTu\\\\my-app\\\\src\\\\components\\\\Client\\\\componentss\\\\Cart_Context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// Tạo context cho giỏ hàng, cho phép các component khác truy cập trạng thái giỏ hàng\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  // Khởi tạo trạng thái cho giỏ hàng với giá trị mặc định là mảng rỗng\n  const [cart, setCart] = useState([]);\n\n  // useEffect được sử dụng để lấy giỏ hàng từ localStorage khi component được mount (tải lên)\n  useEffect(() => {\n    // Lấy dữ liệu giỏ hàng từ localStorage, nếu không có thì sử dụng mảng rỗng\n    const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    setCart(storedCart); // Cập nhật trạng thái giỏ hàng với dữ liệu đã lấy\n  }, []); // Mảng phụ thuộc rỗng có nghĩa là effect này chỉ chạy một lần khi component được mount\n\n  // Hàm thêm sản phẩm vào giỏ hàng\n  const addToCart = product => {\n    // Cập nhật trạng thái giỏ hàng\n    setCart(prevCart => {\n      // Kiểm tra xem sản phẩm đã có trong giỏ hàng chưa\n      const existingProduct = prevCart.find(item => item.id === product.id);\n      if (existingProduct) {\n        // Nếu sản phẩm đã tồn tại, tăng số lượng của sản phẩm\n        return prevCart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + product.quantity\n        } // Cập nhật số lượng sản phẩm\n        : item // Giữ nguyên sản phẩm khác\n        );\n      } else {\n        // Nếu sản phẩm chưa tồn tại trong giỏ hàng, thêm sản phẩm mới vào giỏ hàng\n        return [...prevCart, {\n          ...product,\n          quantity: product.quantity\n        }];\n      }\n    });\n  };\n\n  // Hàm tính số lượng sản phẩm duy nhất trong giỏ hàng\n  const getTotalUniqueItems = () => {\n    const uniqueItemIds = new Set(); // Sử dụng Set để lưu trữ các ID sản phẩm duy nhất\n\n    // Duyệt qua từng sản phẩm trong giỏ hàng\n    cart.forEach(item => {\n      uniqueItemIds.add(item.id); // Thêm ID sản phẩm vào Set\n    });\n    return uniqueItemIds.size; // Trả về số lượng sản phẩm duy nhất\n  };\n\n  // Cung cấp giá trị của context cho các component con\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      setCart,\n      addToCart,\n      getTotalUniqueItems\n    } // Giá trị được cung cấp cho context\n    ,\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n_c = CartProvider;\nexport default CartProvider; // Xuất component CartProvider để sử dụng ở nơi khác\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","storedCart","JSON","parse","localStorage","getItem","addToCart","product","prevCart","existingProduct","find","item","id","map","quantity","getTotalUniqueItems","uniqueItemIds","Set","forEach","add","size","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/DU-AN-TOT-NGHIEP/Website_K18_ThuongMaiDienTu/my-app/src/components/Client/componentss/Cart_Context.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\n// Tạo context cho giỏ hàng, cho phép các component khác truy cập trạng thái giỏ hàng\nexport const CartContext = createContext();\n\nconst CartProvider = ({ children }) => {\n  // Khởi tạo trạng thái cho giỏ hàng với giá trị mặc định là mảng rỗng\n  const [cart, setCart] = useState([]);\n\n  // useEffect được sử dụng để lấy giỏ hàng từ localStorage khi component được mount (tải lên)\n  useEffect(() => {\n    // Lấy dữ liệu giỏ hàng từ localStorage, nếu không có thì sử dụng mảng rỗng\n    const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    setCart(storedCart); // Cập nhật trạng thái giỏ hàng với dữ liệu đã lấy\n  }, []); // Mảng phụ thuộc rỗng có nghĩa là effect này chỉ chạy một lần khi component được mount\n\n  // Hàm thêm sản phẩm vào giỏ hàng\n  const addToCart = (product) => {\n    // Cập nhật trạng thái giỏ hàng\n    setCart((prevCart) => {\n      // Kiểm tra xem sản phẩm đã có trong giỏ hàng chưa\n      const existingProduct = prevCart.find((item) => item.id === product.id);\n  \n      if (existingProduct) {\n        // Nếu sản phẩm đã tồn tại, tăng số lượng của sản phẩm\n        return prevCart.map((item) =>\n          item.id === product.id\n            ? { ...item, quantity: item.quantity + product.quantity } // Cập nhật số lượng sản phẩm\n            : item // Giữ nguyên sản phẩm khác\n        );\n      } else {\n        // Nếu sản phẩm chưa tồn tại trong giỏ hàng, thêm sản phẩm mới vào giỏ hàng\n        return [...prevCart, { ...product, quantity: product.quantity }];\n      }\n    });\n  };\n  \n  // Hàm tính số lượng sản phẩm duy nhất trong giỏ hàng\n  const getTotalUniqueItems = () => {\n    const uniqueItemIds = new Set(); // Sử dụng Set để lưu trữ các ID sản phẩm duy nhất\n\n    // Duyệt qua từng sản phẩm trong giỏ hàng\n    cart.forEach((item) => {\n      uniqueItemIds.add(item.id); // Thêm ID sản phẩm vào Set\n    });\n\n    return uniqueItemIds.size; // Trả về số lượng sản phẩm duy nhất\n  };\n\n  // Cung cấp giá trị của context cho các component con\n  return (\n    <CartContext.Provider\n      value={{ cart, setCart, addToCart, getTotalUniqueItems }} // Giá trị được cung cấp cho context\n    >\n      {children} {/* Render tất cả các component con của CartProvider */}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider; // Xuất component CartProvider để sử dụng ở nơi khác\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE;IACjEL,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMK,SAAS,GAAIC,OAAO,IAAK;IAC7B;IACAP,OAAO,CAAEQ,QAAQ,IAAK;MACpB;MACA,MAAMC,eAAe,GAAGD,QAAQ,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAEvE,IAAIH,eAAe,EAAE;QACnB;QACA,OAAOD,QAAQ,CAACK,GAAG,CAAEF,IAAI,IACvBA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAClB;UAAE,GAAGD,IAAI;UAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAGP,OAAO,CAACO;QAAS,CAAC,CAAC;QAAA,EACxDH,IAAI,CAAC;QACX,CAAC;MACH,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGH,QAAQ,EAAE;UAAE,GAAGD,OAAO;UAAEO,QAAQ,EAAEP,OAAO,CAACO;QAAS,CAAC,CAAC;MAClE;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEjC;IACAlB,IAAI,CAACmB,OAAO,CAAEP,IAAI,IAAK;MACrBK,aAAa,CAACG,GAAG,CAACR,IAAI,CAACC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,OAAOI,aAAa,CAACI,IAAI,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,oBACE1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IACnBC,KAAK,EAAE;MAAEvB,IAAI;MAAEC,OAAO;MAAEM,SAAS;MAAES;IAAoB,CAAE,CAAC;IAAA;IAAAlB,QAAA,GAEzDA,QAAQ,EAAC,GAAC;EAAA;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CApDIF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAsDlB,eAAeA,YAAY,CAAC,CAAC;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}