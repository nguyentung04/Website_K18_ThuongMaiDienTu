{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:3000/api\";\nexport const fetchPosts = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/posts`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching order:\", error);\n    throw error;\n  }\n};\nexport const fetchPostById = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/posts/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching order:\", error);\n    throw error;\n  }\n};\nexport const updatePosts = async (id, postData) => {\n  try {\n    // Log the post data being sent for debugging\n    console.log(\"Updating posts:\", {\n      id,\n      postData\n    });\n\n    // Perform the PUT request to update the post\n    const response = await axios.put(`${BASE_URL}/posts/${id}`, postData, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      } // Correct header for JSON data\n    });\n\n    // Return the response data\n    return response.data;\n  } catch (error) {\n    // Log and throw the error for proper error handling\n    console.error(\"Failed to update post:\", error);\n    throw error;\n  }\n};\nexport const deletePosts = async id => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/posts/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting posts:\", error);\n    throw error;\n  }\n};\nexport const addPosts = async categoryData => {\n  // Replace with your API endpoint and method to add a category\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(categoryData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to add category\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["axios","BASE_URL","fetchPosts","id","response","get","data","error","console","fetchPostById","updatePosts","postData","log","put","headers","deletePosts","delete","addPosts","categoryData","fetch","method","body","JSON","stringify","ok","Error","json"],"sources":["E:/DU-AN-TOT-NGHIEP/Website_K18_ThuongMaiDienTu/my-app/src/service/api/posts.js"],"sourcesContent":["import axios from \"axios\";\nconst BASE_URL = \"http://localhost:3000/api\";\n\nexport const fetchPosts = async (id) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/posts`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching order:\", error);\n    throw error;\n  }\n};\n\nexport const fetchPostById = async (id) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/posts/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching order:\", error);\n    throw error;\n  }\n};\n\nexport const updatePosts = async (id, postData) => {\n  try {\n    // Log the post data being sent for debugging\n    console.log(\"Updating posts:\", { id, postData });\n\n    // Perform the PUT request to update the post\n    const response = await axios.put(`${BASE_URL}/posts/${id}`, postData, {\n      headers: { \"Content-Type\": \"application/json\" }, // Correct header for JSON data\n    });\n\n    // Return the response data\n    return response.data;\n  } catch (error) {\n    // Log and throw the error for proper error handling\n    console.error(\"Failed to update post:\", error);\n    throw error;\n  }\n};\n\nexport const deletePosts = async (id) => {\n  try {\n    const response = await axios.delete(`${BASE_URL}/posts/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error deleting posts:\", error);\n    throw error;\n  }\n};\n\nexport const addPosts = async (categoryData) => {\n  // Replace with your API endpoint and method to add a category\n  const response = await fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(categoryData),\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to add category\");\n  }\n  return response.json();\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,UAAU,GAAG,MAAOC,EAAE,IAAK;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,QAAQ,QAAQ,CAAC;IACrD,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAON,EAAE,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,QAAQ,UAAUE,EAAE,EAAE,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOP,EAAE,EAAEQ,QAAQ,KAAK;EACjD,IAAI;IACF;IACAH,OAAO,CAACI,GAAG,CAAC,iBAAiB,EAAE;MAAET,EAAE;MAAEQ;IAAS,CAAC,CAAC;;IAEhD;IACA,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACa,GAAG,CAAC,GAAGZ,QAAQ,UAAUE,EAAE,EAAE,EAAEQ,QAAQ,EAAE;MACpEG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC,CAAE;IACnD,CAAC,CAAC;;IAEF;IACA,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAG,MAAOZ,EAAE,IAAK;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,MAAM,CAAC,GAAGf,QAAQ,UAAUE,EAAE,EAAE,CAAC;IAC9D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAG,MAAOC,YAAY,IAAK;EAC9C;EACA,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,GAAGlB,QAAQ,QAAQ,EAAE;IAChDmB,MAAM,EAAE,MAAM;IACdN,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,YAAY;EACnC,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACoB,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}